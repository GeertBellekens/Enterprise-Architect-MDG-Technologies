<?xml version="1.0" encoding="Windows-1252" standalone="no"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
	<DataRow>
			<Column name="ScriptID" value="1553" />
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782" />
			<Column name="ScriptName" value="{DA84B748-FD50-44a0-B0A4-8B7F1A6F903E}" />
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;" />
			<Column name="Script" value="Change Management" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="1554" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{70AFF6A8-08ED-4b71-96C3-85CEF6B6D616}" />
			<Column name="ScriptAuthor" value="{DA84B748-FD50-44a0-B0A4-8B7F1A6F903E}" />
			<Column name="Notes" value="&lt;Script Name=&quot;LinkToCRMain&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;" />
			<Column name="Script" value="'[path=\Projects\Bellekens\Change Management]&#xA;'[group=Bellekens Change Management]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;&#xA;' Script Name: LinkToCRMain&#xA;' Author: Geert Bellekens&#xA;' Purpose: Link items to a change reqeust elemnet&#xA;' Date: 2017-02-22&#xA;'&#xA;'&#xA;&#xA;&#xA;function linkItemToCR(selectedItem, selectedItems)&#xA;&#x9;dim groupProcessing&#xA;&#x9;groupProcessing = false&#xA;&#x9;'if the collection is given then we initialize the first item.&#xA;&#x9;if selectedItem is nothing then&#xA;&#x9;&#x9;if not selectedItems is nothing then&#xA;&#x9;&#x9;&#x9;if selectedItems.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set selectedItem = selectedItems(0)&#xA;&#x9;&#x9;&#x9;&#x9;if selectedItems.Count &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;groupProcessing = true&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;if selectedItem is nothing then&#xA;&#x9;&#x9;set selectedItem = Repository.GetContextObject()&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'get the select context item type&#xA;&#x9;dim selectedItemType&#xA;&#x9;selectedItemType = selectedItem.ObjectType&#xA;&#x9;select case selectedItemType&#xA;&#x9;case otElement, otPackage, otAttribute, otMethod, otConnector :&#xA;&#x9;&#x9;'if the selectedItem is a package then we use the Element part of the package&#xA;&#x9;&#x9;if selectedItemType = otPackage then&#xA;&#x9;&#x9;&#x9;set selectedItem = selectedItem.Element&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'get the logged in user&#xA;&#x9;&#x9;Dim userLogin&#xA;&#x9;&#x9;userLogin = getUserLogin&#xA;&#x9;&#x9;dim lastCR as EA.Element&#xA;&#x9;&#x9;set lastCR = nothing&#xA;&#x9;&#x9;dim CRtoUse as EA.Element&#xA;&#x9;&#x9;set CRtoUse = nothing&#xA;&#x9;&#x9;set lastCR = getLastUsedCR(userLogin)&#xA;&#x9;&#x9;'get most recent used CR by this user&#xA;&#xA;&#x9;&#x9;if not selectedItem is nothing then&#xA;&#x9;&#x9;&#x9;dim lastComments&#xA;&#x9;&#x9;&#x9;lastComments = vbNullString&#xA;&#x9;&#x9;&#x9;'if there is a last CR then we ask the user if we need to use that one&#xA;&#x9;&#x9;&#x9;if not lastCR is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim response&#xA;&#x9;&#x9;&#x9;&#x9;if groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;response = Msgbox(&quot;Link all &quot; &amp; selectedItems.Count &amp; &quot; elements to change: &quot;&quot;&quot; &amp; lastCR.Name &amp; &quot;&quot;&quot;?&quot;, vbYesNoCancel+vbQuestion, &quot;Link to CR&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elseif not isCRLinked(selectedItem,lastCR) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;response = Msgbox(&quot;Link element &quot;&quot;&quot; &amp; selectedItem.Name &amp; &quot;&quot;&quot; to change: &quot;&quot;&quot; &amp; lastCR.Name &amp; &quot;&quot;&quot;?&quot;, vbYesNoCancel+vbQuestion, &quot;Link to CR&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'check the response&#xA;&#x9;&#x9;&#x9;&#x9;select case response&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case vbYes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set CRToUse = lastCR&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case vbCancel&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'user cancelled, stop altogether&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Exit function&#xA;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'If there was no last CR, or the user didn't want to link that one we let the user choose one&#xA;&#x9;&#x9;&#x9;if CRToUse is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim CR_id   &#xA;&#x9;&#x9;&#x9;&#x9;CR_ID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Change,Issue,Defect&quot;) &#xA;&#x9;&#x9;&#x9;&#x9;if CR_ID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set CRToUse = Repository.GetElementByID(CR_ID)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'user selected same change as last time. So he might want to reuse his comments as well&#xA;&#x9;&#x9;&#x9;&#x9;lastComments = getLastUsedComment(userLogin)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'if the CRtoUse is now selected then we link it to the selected element&#xA;&#x9;&#x9;&#x9;if not CRToUse is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim linkCounter&#xA;&#x9;&#x9;&#x9;&#x9;linkCounter = 0&#xA;&#x9;&#x9;&#x9;&#x9;'first check if this CR is not already linked&#xA;&#x9;&#x9;&#x9;&#x9;if isCRLinked(selectedItem,CRToUse) and not groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;The CR was already linked to this item&quot;, vbOKOnly + vbExclamation ,&quot;Already Linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the comments to use&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;comments = InputBox(&quot;Please enter comments for this change&quot;, &quot;Change Comments&quot;,lastComments)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if len(comments) &gt; 2 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each selectedItem in selectedItems&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'check the object type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;selectedItemType = selectedItem.ObjectType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select case selectedItemType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case otElement, otPackage, otAttribute, otMethod, otConnector :&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not isCRLinked(selectedItem,CRToUse) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkToCR selectedItem, selectedItemType, CRToUse, userLogin, comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkCounter = linkCounter + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if linkCounter &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;Successfully linked &quot; &amp; selectedItems.Count &amp; &quot; elements to change &quot;&quot;&quot; &amp; CRToUse.Name&amp; &quot;&quot;&quot;&quot;  , vbOKOnly + vbInformation ,&quot;Elements linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;No links created to change &quot; &amp; CRToUse.Name &amp; &quot;.&quot; &amp; vbNewLine &amp; &quot;They are probably already linked&quot; , vbOKOnly + vbExclamation ,&quot;Already Linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkToCR selectedItem, selectedItemType, CRToUse, userLogin, comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;The CR has not been linked because no comment was provided&quot;, vbOKOnly + vbExclamation ,&quot;No CR link&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;case else&#xA;&#x9;&#x9;MsgBox &quot;Cannot link this type of element to a CR&quot; &amp; vbNewline &amp; &quot;Supported element types are: Element, Package, Attribute, Operation and Relation&quot;&#xA;&#x9;end select&#xA;end function&#xA;&#xA;&#xA;&#xA;function isCRLinked(item, CR)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;isCRLinked = false&#xA;&#x9;for each taggedValue in item.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Value = CR.ElementGUID then&#xA;&#x9;&#x9;&#x9;isCRLinked = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function linkToCR(selectedItem, selectedItemType, CRToUse, userLogin, comments)&#xA;&#x9;Session.Output &quot;CRToUse: &quot; &amp; CRToUse.Name &amp; &quot; userLogin: &quot; &amp; userLogin &amp; &quot; comments: &quot; &amp; comments&#xA;&#x9;dim crTag &#xA;&#x9;set crTag = nothing&#xA;&#x9;set crTag = selectedItem.TaggedValues.AddNew(&quot;CR&quot;,&quot;&quot;)&#xA;&#x9;if not crTag is nothing then&#xA;&#x9;&#x9;crTag.Value = CRToUse.ElementGUID&#xA;&#x9;&#x9;crTag.Notes = &quot;user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;date=&quot; &amp; Year(Date) &amp; &quot;-&quot; &amp; Right(&quot;0&quot; &amp; Month(Date),2) &amp; &quot;-&quot; &amp; Right(&quot;0&quot; &amp; Day(Date),2) &amp; &quot;;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;comments=&quot; &amp; comments&#xA;&#x9;&#x9;crTag.Update&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getLastUsedCR(userLogin)&#xA;&#x9;dim wildcard&#xA;&#x9;dim sqlDateString&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;wildcard = &quot;*&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; mid(tv.Notes, instr(tv.[Notes],'date=') + len('date='),10) &quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;wildcard = &quot;%&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; substring(tv.Notes, charindex('date=',tv.[Notes]) + len('date='),10) &quot;&#xA;&#x9;end if&#xA;&#x9;dim sqlGetString&#xA;&#x9;sqlGetString = &quot;select top 1 o.Object_id &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_objectproperties tv &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.ea_guid = tv.VALUE) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Notes] like 'user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; wildcard &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by  &quot; &amp; sqlDateString &amp; &quot; desc, tv.PropertyID desc &quot;&#xA;&#x9;dim CRs&#xA;&#x9;dim CR as EA.Element&#xA;&#x9;set CR = nothing&#xA;&#x9;'get the last CR&#xA;&#x9;set CRs = getElementsFromQuery(sqlGetString)&#xA;&#x9;if CRs.Count &gt; 0 then&#xA;&#x9;&#x9;set CR = CRs(0)&#xA;&#x9;end if&#xA;&#xA;&#x9;set getLastUsedCR = CR&#xA;end function&#xA;&#xA;function getLastUsedComment(userLogin)&#xA;&#x9;dim wildcard&#xA;&#x9;dim sqlDateString&#xA;&#x9;dim sqlCommentsString&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;wildcard = &quot;*&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; mid(tv.Notes, instr(tv.[Notes],'date=') + len('date='),10) &quot;&#xA;&#x9;&#x9;sqlCommentsString = &quot; mid(tv.Notes, instr(tv.[Notes],'comments=') + len('comments=')) &quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;wildcard = &quot;%&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; substring(tv.Notes, charindex('date=',tv.[Notes]) + len('date='),10) &quot;&#xA;&#x9;&#x9;sqlCommentsString = &quot; substring(tv.Notes, charindex('comments=',tv.[Notes]) + len('comments='), datalength(tv.Notes))  &quot;&#xA;&#x9;end if&#xA;&#x9;dim sqlGetString&#xA;&#x9;sqlGetString = &quot;select top 1 &quot; &amp; sqlCommentsString &amp; &quot; as comments &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_objectproperties tv &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.ea_guid = tv.VALUE) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Notes] like 'user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; wildcard &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by  &quot; &amp; sqlDateString &amp; &quot; desc, tv.PropertyID desc &quot;&#xA;&#x9;dim queryResult &#xA;&#x9;queryResult = Repository.SQLQuery(sqlGetString)&#xA;&#x9;Session.Output queryResult&#xA;&#x9;dim results&#xA;&#x9;results = convertQueryResultToArray(queryResult)&#xA;&#x9;if Ubound(results) &gt; 0 then&#xA;&#x9;&#x9;getLastUsedComment = results(0,0)&#xA;&#x9;else&#xA;&#x9;&#x9;getLastUsedComment = vbNullString&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns an ArrayList with the elements accordin tot he ObjectID's in the given query&#xA;function getElementsFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;result.Add Element&#xA;&#x9;next&#xA;&#x9;set getElementsFromQuery = result&#xA;end function&#xA;&#xA;'converts the query results from Repository.SQLQuery from xml format to a two dimensional array of strings&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;&#x9;&#x9;Dim rowNode &#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;arrayCreated = False&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;&#x9;If (rowNode.HasChildNodes) Then&#xA;&#x9;&#x9;&#x9;&#x9;'redim array (only once)&#xA;&#x9;&#x9;&#x9;&#x9;If Not arrayCreated Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrayCreated = True&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'write f&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result(i, j) = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;Next&#xA;&#x9;end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;'returns the currently logged in user&#xA;function getUserLogin()&#xA;&#x9;'get the currently logged in user&#xA;&#x9;Dim userLogin&#xA;&#x9;if Repository.IsSecurityEnabled then&#xA;&#x9;&#x9;userLogin = Repository.GetCurrentLoginUser(false)&#xA;&#x9;else&#xA;&#x9;&#x9;userLogin = &quot;Unknown User&quot;&#xA;&#x9;end if&#xA;&#x9;getUserLogin = userLogin&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="1555" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{F46ED2ED-90B2-4524-A640-C2FA0C8C5223}" />
			<Column name="ScriptAuthor" value="{DA84B748-FD50-44a0-B0A4-8B7F1A6F903E}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Link To CR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;" />
			<Column name="Script" value="'[path=\Projects\Bellekens\Bellekens Change Management]&#xA;'[group=Bellekens Change Management]&#xA;option explicit&#xA;&#xA;!INC Change Management.LinkToCRMain&#xA;&#xA;'This script only calls the function defined in the main script.&#xA;'Ths script is to be copied in the appropriate groups&#xA;&#xA;'Execute main function defined in LinkToCRMain&#xA;sub main&#xA;&#x9;'check if called from diagram&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;set diagram = Repository.GetCurrentDiagram&#xA;&#x9;dim linkedToCR&#xA;&#x9;linkedToCR = false&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;dim selectedItems&#xA;&#x9;&#x9;set selectedItems = getSelectedElements(diagram)&#xA;&#x9;&#x9;if selectedItems.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;linkedToCR = true&#xA;&#x9;&#x9;&#x9;linkItemToCR nothing, selectedItems&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;'if not from diagram then use the selection in the project browser&#xA;&#x9;if not linkedToCR then&#xA;&#x9;&#x9;dim treeSelectedElements&#xA;&#x9;&#x9;set treeSelectedElements = Repository.GetTreeSelectedElements()&#xA;&#x9;&#x9;if treeSelectedElements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;linkItemToCR nothing, treeSelectedElements&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;dim selectedItem&#xA;&#x9;&#x9;&#x9;set selectedItem = Repository.GetContextObject&#xA;&#x9;&#x9;&#x9;linkItemToCR selectedItem, nothing&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function getSelectedElements(diagram)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim selectedDiagramObjects&#xA;&#x9;set selectedDiagramObjects = diagram.SelectedObjects&#xA;&#x9;dim selectedDiagramObject as EA.DiagramObject&#xA;&#x9;for each selectedDiagramObject in selectedDiagramObjects&#xA;&#x9;&#x9;dim selectedElement&#xA;&#x9;&#x9;set selectedElement = Repository.GetElementByID(selectedDiagramObject.ElementID)&#xA;&#x9;&#x9;if not selectedElement is nothing then&#xA;&#x9;&#x9;&#x9;selectedElements.Add selectedElement&#xA;&#x9;&#x9;end if&#xA;&#x9;next &#xA;&#x9;set getSelectedElements = selectedElements&#xA;end function&#xA;&#xA;main" />
		</DataRow></DataSet>
</RefData>